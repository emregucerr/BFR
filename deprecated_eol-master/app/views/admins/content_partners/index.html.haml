= render 'menu'

#sidebar
  .filters.small
    = form_tag({}, :method => :get) do
      %fieldset
        - option_please_select = "<option value=\"\">#{I18n.t(:option_please_select)}</option>"
        %dl
          %dt
            = label_tag :sort_by, I18n.t(:sort_by_label)
          %dd
            = select_tag :sort_by, options_for_select(@sort_by_options, @sort_by)
          %dt
            = label_tag :name, I18n.t('activerecord.attributes.content_partner.full_name')
          %dd
            = text_field_tag :name, @name
          %dt
            = label_tag :published, I18n.t(:content_partner_filter_published)
          %dd
            = select_tag :published, options_for_select(@published_options, @published)
          %dt
            = label_tag :resource_status_id, I18n.t('activerecord.attributes.resource.resource_status_id')
          %dd
            = select_tag :resource_status_id,
              options_from_collection_for_select(@resource_statuses, :id, :label, @resource_status_id.to_i), :prompt => I18n.t(:option_please_select)
          %dt
            = label_tag :content_partner_status_id, I18n.t('activerecord.attributes.content_partner.content_partner_status')
          %dd
            = select_tag :content_partner_status_id,
              options_from_collection_for_select(@partner_statuses, :id, :label, @partner_status_id.to_i), :prompt => I18n.t(:option_please_select)
          %dt
            = label_tag :vetted, I18n.t('activerecord.attributes.resource.vetted')
          %dd
            = select_tag :vetted, options_for_select(@vetted_options, @vetted)
      %fieldset.actions
        = submit_tag I18n.t(:filter_sort, :scope => [:helpers, :submit]), :name => nil
        %small= link_to I18n.t(:cancel), admin_content_partners_path
#content_partners.main_container
  - if @partners.blank?
    .article
      .empty
        %h2= I18n.t(:admin_content_partners_index_header)
        %p= I18n.t(:content_partners_empty)
  - else
    .header
      %h2= I18n.t(:admin_content_partners_index_header)
      = will_paginate @partners, :previous_label => I18n.t(:pagination_previous), :next_label => I18n.t(:pagination_next),
        :inner_window => 2, :outer_window => 2
    %ul.article.list
      - @partners.each do |partner|
        %li{:id => "partner_#{partner.id}"}
          = link_to image_tag(partner.logo_url(size: :small),
            :alt => I18n.t(:content_partner_logo_alt_text, :partner_name => h(partner.name))), partner
          .details
            %h3= link_to h(partner.full_name), partner
            %p
              = partner.content_partner_status.label rescue I18n.t(:content_partner_status_empty)
              &bull;
              = partner.is_public ? I18n.t(:content_partner_public_true) : I18n.t(:content_partner_public_false)
              - if partner.unpublished_content?
                &bull;
                = I18n.t(:content_partner_has_unpublished_content_true)
            %dl
              %dt
                = I18n.t('helpers.label.content_partner.last_action')
              %dd
                = partner.last_action_date
              %dt
                = I18n.t('helpers.label.content_partner.created_at')
              %dd
                = partner.created_at
              %dt
                = I18n.t('helpers.label.content_partner.current_agreement')
              %dd
                - if partner.agreement.blank?
                  = I18n.t(:content_partner_current_agreement_empty)
                - else
                  - if partner.agreement.is_accepted?
                    = I18n.t(:content_partner_current_agreement_signed_on_with_date, :date => partner.agreement.signed_on_date.strftime("%Y-%m-%d"))
                    &bull;
                    = link_to I18n.t(:content_partner_current_agreement_view_link),
                      content_partner_agreement_path(partner, partner.agreement)
                  - else
                    = I18n.t(:content_partner_current_agreement_not_accepted)
                    &bull;
                    = link_to I18n.t(:content_partner_current_agreement_edit_link), edit_content_partner_agreement_path(partner, partner.agreement)
                &bull;
                = link_to I18n.t(:content_partner_current_agreement_create_link), new_content_partner_agreement_path(partner)
              %dt
                = I18n.t('activerecord.attributes.content_partner.admin_notes')
              %dd
                = partner.admin_notes || I18n.t(:value_empty)
          - unless partner.resources.size.zero?
            %ul.resources
              - partner.resources.each do |resource|
                - en_resource_status = resource.resource_status.label('en').downcase.gsub(' ','_') rescue 'unknown'
                - hierarchy = resource.dwc_hierarchy.blank? ? resource.hierarchy : resource.dwc_hierarchy
                - en_browsable_status = en_browsable_status(hierarchy)
                %li{:class => [en_resource_status, en_browsable_status].compact.join(' ')}
                  %h5
                    = resource.title
                    %small
                      = "["
                      = link_to I18n.t(:content_partner_resource_view_link), content_partner_resource_path(partner, resource)
                      &bull;
                      = link_to I18n.t(:content_partner_resource_edit_link), edit_content_partner_resource_path(partner, resource)
                      = "]"
                  .resource_status
                    %dl
                      %dt
                        = I18n.t('activerecord.attributes.resource.hierarchy')
                      %dd
                        - if hierarchy.blank?
                          = I18n.t(:value_empty)
                        - else
                          = I18n.t("content_partner_resource_hierarchy_#{en_browsable_status}")
                          = "["
                          = link_to I18n.t(:content_partner_resource_hierarchy_edit_link),
                            edit_content_partner_resource_hierarchy_path(partner, resource, hierarchy, :return_to => current_url)
                          = "]"
                      %dt
                        = I18n.t('helpers.label.resource.latest_harvest_event')
                      %dd
                        - if resource.latest_harvest_event.blank?
                          = I18n.t(:value_empty)
                        - else
                          = I18n.t('helpers.label.harvest_event.completed_at')
                          = resource.latest_harvest_event.completed_at.blank? ? I18n.t(:value_empty) : resource.latest_harvest_event.completed_at.strftime('%Y-%m-%d')
                          %br/
                          - if resource.latest_harvest_event.published_at.blank?
                            - if resource.latest_harvest_event.publish?
                              = I18n.t(:content_partner_resource_harvest_event_publish_pending)
                            - else
                              = I18n.t(:content_partner_resource_harvest_event_not_published)
                          - else
                            = I18n.t('helpers.label.harvest_event.published_at')
                            = resource.latest_harvest_event.published_at.strftime('%Y-%m-%d')
                          %br/
                          - if !resource.latest_harvest_event.publish? && resource.latest_harvest_event.publish_is_allowed?
                            = form_for [partner, resource, resource.latest_harvest_event] do |f|
                              = hidden_field_tag 'return_to', current_url
                              = f.hidden_field :publish, :value => :true
                              %fieldset.actions
                                = f.submit I18n.t('helpers.submit.harvest_event.publish'), :name => :commit_publish_harvest_event,
                                  :data => { :confirm => I18n.t(:content_partner_resource_harvest_event_confirm_publish, :completed_at => format_date_time(resource.latest_harvest_event.completed_at), :resource_title => h(resource.title)) }
                      %dt
                        = I18n.t('helpers.label.content_partner.latest_published_harvest_event')
                      %dd
                        - if resource.latest_published_harvest_event.blank? || resource.latest_published_harvest_event.published_at.blank?
                          = I18n.t(:value_empty)
                        - else
                          = resource.latest_published_harvest_event.published_at.strftime('%Y-%m-%d')
                      %dt
                        = I18n.t('helpers.label.content_partner.oldest_published_harvest_event')
                      %dd
                        - if resource.oldest_published_harvest_event.blank? || resource.oldest_published_harvest_event.published_at.blank?
                          = I18n.t(:value_empty)
                        - else
                          = resource.oldest_published_harvest_event.published_at.strftime('%Y-%m-%d')
                      %dt
                        = I18n.t('helpers.label.resource.resource_status')
                      %dd
                        = resource.status_label
                        - if resource.status_can_be_changed_to?(ResourceStatus.harvest_requested)
                          = button_to I18n.t('helpers.submit.resource.harvest_requested'), harvest_requested_content_partner_resource_path(partner, resource),
                            :data => { :confirm => I18n.t(:content_partner_resource_confirm_harvest_requested, :resource_title => h(resource.title)) }
                  .settings
                    = form_for [partner, resource], :builder => ApplicationHelper::EolFormBuilder do |f|
                      = hidden_field_tag :return_to, current_url
                      = f.label :refresh_period_hours, :class => 'select' do
                        = I18n.t('helpers.label.resource.refresh_period_hours')
                        = f.select :refresh_period_hours, options_for_select(@import_frequencies, resource.refresh_period_hours)
                      = f.label :vetted, :class => 'checkbox' do
                        = f.check_box :vetted, { :disabled => resource.vetted? }
                        = I18n.t('activerecord.attributes.resource.vetted')
                      = f.label :auto_publish, :class => 'checkbox' do
                        = f.check_box :auto_publish
                        = I18n.t('activerecord.attributes.resource.auto_publish')
                      %fieldset.actions
                        = f.submit I18n.t('helpers.submit.resource.update_settings'), :name => :commit_update_settings_only
                  %dl.notes
                    %dt
                      = I18n.t('activerecord.attributes.resource.notes')
                    %dd
                      - if resource.notes.blank?
                        = I18n.t(:value_empty)
                      - else
                        = truncate(resource.notes, :length => 200)
    .footer
      = will_paginate @partners, :previous_label => I18n.t(:pagination_previous), :next_label => I18n.t(:pagination_next),
        :inner_window => 2, :outer_window => 2


