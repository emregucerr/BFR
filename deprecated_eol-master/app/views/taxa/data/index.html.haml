- EOL.debug("app/views/taxa/data/index.html.haml", prefix: "V")
- cache("taxa/#{@taxon_page.id}/data_index/#{current_language}", expires_in: 2.weeks) do
  #tabs_sidebar.data
    %ul.tabs.with_icons{ class: 'subtabs' }
      %li.all{ class: 'active' }= link_to I18n.t(:all_categories), taxon_data_path(@taxon_page)
      - unless @page_traits.blank?
        - @page_traits.categories.each do |category|
          -# TODO: the class needs to be active if its toc_id was passed in...
          %li= link_to category.label, taxon_data_path(@taxon_page, toc_id: category.id), data: { toc_id: category.id }
        -# TODO: range data, which we do not have yet.
        - if @page_traits.categories_need_other?
          %li= link_to I18n.t(:other_category_subtab), taxon_data_path(@taxon_page, toc_id: "other")
        - unless @page_traits.glossary.blank?
          %li.glossary.start_section= link_to I18n.t(:glossary_subhead).html_safe, '#'
      -# TODO: This class needs to be start_section if the glossary tab is missing.
      %li.about= link_to I18n.t(:data_subtab_about), about_taxon_data_path(@taxon_page)
  .main_container#taxon_data
    %h3.assistive= I18n.t(:taxon_data_header, taxon: @taxon_page.scientific_name)
    .about_subtab{ style: 'display: none' }
      %h3= I18n.t(:data_about_subtab_header)
      .explain
        = raw I18n.t(:data_about_subtab_content,
          user_register_url: new_user_path,
          traitbank_path: cms_page_path('traitbank'),
          contact_contribute_path: contact_us_path(subject: 'Contribute'),
          contact_traitbank_path: contact_us_path(subject: 'TraitBank'),
          register_path: new_user_path,
          login_path: login_path(return_to: request.original_url))
    - unless @page_traits.blank?
      - cache("taxa/#{@taxon_page.id}/data/glossary/#{current_language}", expires_in: 2.weeks) do
        - unless @page_traits.glossary.blank?
          .glossary_subtab{ style: 'display: none' }
            .header_underlined
              %h3= I18n.t(:data_subtab_glossary, taxon: @taxon_page.scientific_name).html_safe
            %ul.glossary
              - @page_traits.glossary.sort_by { |kn| kn.name.downcase }.each do |known_uri|
                - glossary_define(known_uri, glossary_link: true, attribution: true, search_link: true)
    .help_text
      %p= t(:data_disclaimer,
          traitbank_search_path: data_search_path(taxon_concept_id: @taxon_concept),
          traitbank_info_path: cms_page_path('traitbank')).html_safe
    - unless @page_traits.blank?
      - categories = @page_traits.categories
      - categories << :other if @page_traits.categories_need_other?
      - categories.each do |category|
        - toc_id = category == :other ? "other" : category.id
        - cache("taxa/#{@taxon_page.id}/data/category/#{toc_id}/#{current_language}", expires_in: 2.weeks) do
          .header_underlined
            %h3= category == :other ? I18n.t(:other_category_subtab) : category.label
          - last_predicate_group = nil
          -# TODO: what is this for? Clearly it counts the number of predicates, but
          -# it's not clear to me (I haven't looked at JS, maybe it's there) what it
          -# is ultimately used for other than creating a class on the node...
          - type_index = 0
          %table.standard.categorized.data{ summary: I18n.t(:data_table_summary,
            taxon: @taxon_page.scientific_name),
            data: { more: I18n.t(:data_show_n_more_rows), 'toc_id' => toc_id } }
            - @page_traits.traits_by_category(category).each do |trait|
              - cache("taxa/#{@taxon_page.id}/data/traits/#{trait.point.anchor}/#{current_language}", expires_in: 2.weeks) do
                - EOL.debug("trait: #{trait.point.anchor}", prefix: "V")
                - if trait.point.nil?
                  %tr.data
                    %th.predicate
                      %div.term
                        = "Could not find a data point for #{trait.uri}"
                        -# TODO: this is useless. If there's no point, there will be
                        -# errors later. Fix, one way or the other...
                  - next
                - classes = []
                - unless trait.visible?
                  - if current_user.is_curator?
                    - classes << 'hidden'
                  - else
                    - next
                - first = trait.predicate_group != last_predicate_group
                - header_id = trait.point.anchor
                - row_is_selected = (@selected_data_point_uri_id && @selected_data_point_uri_id.to_i == data_point_uri.id)
                -# using the instance methods as opposed to scopes allows us to use
                -# preloaded taxon_data_exemplars
                - exemplar = trait.point.taxon_data_exemplars.select(&:included?).any?
                - excluded = trait.point.taxon_data_exemplars.select(&:excluded?).any?
                - if first
                  - classes << 'first'
                  - type_index += 1
                  - header_id = trait.point.header_anchor
                  - last_predicate_group = trait.predicate_group
                %tr.data{ id: trait.anchor, class: (classes + ['data']).join(' '), data: { loaded: true, type: type_index.nil? ? nil : "type_#{type_index}" } }
                  %th.predicate{ id: header_id }
                    - if first
                      %a.info_icon
                        \&nbsp;
                      .term
                        - add_exemplar_or_excluded_icon(exemplar: exemplar, excluded: excluded)
                        = trait.predicate_name
                        - if trait.statistical_method?
                          %span.stat= trait.statistical_method_names.join(", ")
                        -# - defn(trait.predicate_uri, search_link: true, glossary_link: true)
                  %td.val{ headers: header_id, id: "#{header_id}_d" }
                    %span.fold
                      = link_to(image_tag("arrow_fold_down.png",
                        alt: I18n.t(:data_row_additional_detail_alt)),
                        taxon_data_path(@taxon_concept,
                        data_point_uri_id: trait.point.id, anchor: trait.point.anchor),
                        title: I18n.t(:data_row_additional_detail_assistive))
                    .term{ data: { term: trait.value_uri }}
                      - add_exemplar_or_excluded_icon(exemplar: exemplar, excluded: excluded)
                      = format_value(trait).html_safe
                      -# - defn(trait.value_uri, search_link: true, glossary_link: true)
                  %td.source
                    %span.source
                      - if trait.resource
                        = link_to(trait.resource.content_partner.name, trait.partner)
                      - else
                        = link_to("See original source", trait.source_url)
                  %td.comment
                    %span.comments
                      - if true
                        &nbsp;
                %tr.actions{ id: "#{trait.anchor}_actions", class: (classes + ['actions']).join(' ') }
                  %td{ colspan: 4 }
                    - cache("taxa/#{@taxon_page.id}/data/traits/#{trait.point.anchor}/meta/#{current_language}", expires_in: 2.weeks) do
                      -# - EOL.debug("meta", prefix: "V")
                      .metadata
                        %table.meta{ summary: I18n.t(:data_metadata_subtable_summary) }
                          %caption.title= I18n.t(:data_about_this_record)
                          - i = 0
                          - trait.meta.each do |pred, vals|
                            - i += 1
                            - row_id = "#{trait.point.anchor}_meta_#{i}"
                            %tr
                              %th{id: "#{row_id}_h"}
                                - if pred.is_a?(KnownUri)
                                  = pred.name
                                  -# - defn(pred, search_link: true, glossary_link: true)
                                - else
                                  = pred
                              %td{id: "#{row_id}_d"}
                                - vals.each do |val|
                                  - if val.is_a?(KnownUri)
                                    = val.name
                                    -# - defn(val, search_link: true, glossary_link: true)
                                  - elsif val.is_a?(Hash)
                                    - if val[:value].is_a?(KnownUri)
                                      = val[:value].name
                                      -# - defn(val[:value], search_link: true, glossary_link: true)
                                    - else
                                      = raw val[:value].add_missing_hyperlinks
                                    - if val[:units].is_a?(KnownUri)
                                      = add_superscripts(val[:units].name).html_safe
                                    - else
                                      = add_superscripts(val[:units]).html_safe
                                  - else
                                    = raw val.add_missing_hyperlinks
                                  - if vals.size > 1
                                    %br
                          %tr
                            %th
                              = I18n.t(:data_link_to_record)
                              - info_icon
                            - link = taxon_data_url(@taxon_page, anchor: trait.point.anchor)
                            %td= link_to link, link
                    -# - EOL.debug("(end meta)", prefix: "V")
                    .actions
                      %ul
                        %li
                          - if trait.content_partner
                            = raw I18n.t("data_provided_by_content_partner",
                              whom: link_to(trait.content_partner.name,
                              trait.content_partner))
                          - else
                            = I18n.t(:data_point_uri_source_missing)
                      - if current_user.min_curator_level?(:full) || logged_in?
                        .additional_commands.clearfix
                          - if current_user.min_curator_level?(:full) || logged_in?
                            - if current_user.min_curator_level?(:full)
                              - if trait.point.visible?
                                - hide_link =  data_point_uri_hide_path(trait.point)
                                = link_to I18n.t(:data_row_hide_button),hide_link,method: :put,class: 'hide button', remote: true
                              - elsif trait.point.invisible?
                                - show_link = data_point_uri_unhide_path(trait.point)
                                = link_to I18n.t(:data_row_unhide_button), show_link, method: :put, class: 'unhide button', remote: true
                              - unless excluded
                                = link_to I18n.t(:data_row_remove_exemplar_button), taxon_data_exemplars_path(id: trait.point.id, taxon_concept_id: trait.point.taxon_concept.id, exclude: true),
                                 method: :post, class: "remove_exemplar button", remote: true
                              - unless exemplar
                                = link_to I18n.t(:data_row_add_exemplar_button), taxon_data_exemplars_path(id: trait.point.id, taxon_concept_id: trait.point.taxon_concept.id,exclude: false),
                                method: :post, class: "add_exemplar button", remote: true
                              - if excluded
                                %span.note= I18n.t(:data_row_excluded_from_overview_notice)
                            - elsif logged_in?
                              %p.note= I18n.t(:annotation_note).html_safe
- EOL.debug("EXIT - app/views/taxa/data/index.html.haml", prefix: "V")
