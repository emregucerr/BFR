#content
  #profile_open_authentications.site_column
    .article.list
      %ul
        - $ENABLED_SOCIAL_PLUGINS.sort_by{|provider_sym| provider_sym.to_s}.each do |oauth_provider|
          %li{:class => oauth_provider}
            %h3= I18n.t(oauth_provider, :scope => [:users, :open_authentications])
            - if connected_open_authentication = @user.open_authentications.select{|oa| oa.provider == oauth_provider.to_s}.first
              %p
                - if connected_open_authentication.verified_at.nil?
                  = t('.connected_unverified')
                - else
                  = t('.connected_last_verified', 
                    :time_passed => time_ago_in_words(connected_open_authentication.verified_at))
              .buttons
                - # TODO: check we still have access to a connected account
                -#= form_for [@user, connected_open_authentication] do |form_update|
                -#  = form_update.hidden_field :provider
                -#  = form_update.hidden_field :guid
                -#  %fieldset.actions
                -#    = form_update.submit I18n.t('helpers.submit.open_authentication.update')
                = form_for [@user, connected_open_authentication],
                  :html => { :method => :delete, :class => 'button_to',
                  :id => "delete_open_authentication_#{connected_open_authentication.id}" } do |form_destroy|
                  %div
                    = form_destroy.submit I18n.t('helpers.submit.open_authentication.destroy'), :class => 'delete'
            - else
              %p= t('.not_connected')
              .buttons
                = form_for [@user, @user.open_authentications.build(:provider => oauth_provider)],
                  :url => new_user_open_authentication_path(@user),
                  :html => {:id => "new_open_authentication_#{oauth_provider}",
                  :method => :get } do |form_create|
                  = hidden_field_tag :oauth_provider, oauth_provider
                  %fieldset.actions
                    = form_create.submit I18n.t('helpers.submit.open_authentication.create')
    - # TODO: would be nicer if this was in the page header area
    = link_to t('.return_link'), edit_user_url(@user)

